Questions about project:

process_wait / process.c
	Will we have to worry about race conditions when implementing process_wait()?
		no, not modifying any saved data. should be fine in this function
	Returning status?
		can be anything. there is no predefined list or enum to tell us what to pass. Our goal is only to pass what is sent in exit to process_execute and print it

process_execute / process.c
	should we parse both the fn_copy and filename in process.c?
		pass args to setup stack and parse there
		Dont have to parse both fn_copy and filename. Filename is used in thread_create to name the thread and that's it. 
		**always copy string before tokenizing it **
	how to pass args to start_process?
		leave cmdline alone and send it to load which calls setup_stack(). From there, we can pass it to setup_stack() and parse in setup_stack(). 

process.c functions
	how should we test these functions? use asserts, printf, etc?
		use backtrace and asserts, prints to see whats going on

setup_stack / process.c
	word_align??





syscall.c
	1. Best place to implement "access user memory"?
		create a function and call it in syscall_handler. **They'll take off points if we don't use a function and copy and paste the validating code multiple times
	2. Do we need to call the system calls ourselves or are they called from syscall_handler?
		system call functions are called from within syscall_handler after we get the system call number
	3. Are we supposed to eventually uncomment UNUSED? Should we access the stack in there using the interrupt frame? Does syscall_init ever get called or is it just a template used to base all our other calls on that?
		we are using the frame that is passed to us. UNUSED was just to get rid of the warning before we actually implemented this function
	4. Which pointer should we use to access args off the stack inside syscall_handler?
		esp that is in the bottom couple lines of the frame struct
	5. Use lookup_page() to verify pointer? should be NULL if the page doesn't exist because it hasn't been mapped. What is *PD(page directory)?
		lookup_page() will be used to validate the page. The PD argument is thread specific. The second argument is whatever pointer we're trying to dereference and want to check the validity of. 
	6. Are we verifying actual pointer to frame or stack pointer saved inside of frame?
		Verifying the pointer inside of frame

	***for each frame sent to use, we have to validate all of the data sent to us. this data changes depending on the system call that is being called***

		eax will be the status generally, there are other cases


3/5 syscall_handler / syscall.c
	1. When accessing char pointers off the user stack, should we dereference the void esp pointer first? 
		Possibly change this to an integer pointer and just do user_esp++.
		
	2. How to pass void pointers to functions?
		cast void pointer to char * for buffer
	3. Generally, can you explain why we need synchronization and how to use it?
		Use between functions that need order. i.e. read and write, create before open etc.

	4. What does it mean to use process_wait() in the context of wait()?
		Exactly like how we are doing it.

	process_wait / process.c
	1. How do we tell if the child was killed by a kernel exception?
		Inside of thread_exit() check if it was killed by the kernel. We have to figure out how to do that.
		

-verify
	need to verify all pointer values
-user_esp
	
-child_list
	
-pid_t cast

***Need to handle case when child dies before parent adds child to list

**use semaphore to eliminate busy wait; call up in thread_exit() and call down in process_wait() - use something to tell if child died

**have to deal with orphan children, child not being added to parent list of children, 

**can use global semaphore for file system calls to restrict access to them
 

** locks = mutual exclusion; semaphores = order of events matter


3/5 #2 process.c
	1. where to declare and initialize the semaphore?

** keep around a list of dead children until they are reaped or their parent has been killed (the pointer to the parent is null). initialize the list of dead children in init_thread() function. 

** in thread_exit() check the list of children in child_list, and set the child's parent_ptr to NULL

**we want 

3/7 
	1. Is the parent the current thread in the thread_create() function?

	2. Race Condition between thread_exit and process_wait: we delete the child thread before we have a chance to return the child_thread's exit_status. Does thread_exit() actually destroy child's thread_struct()?

	3. If a parent is killed and we have orphans, how should we handle those? Do they return an exit status or just run to completion? If they return an exit status, where do they return it?

3/10
	1. How to handle synchonization in exec()?